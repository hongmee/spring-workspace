<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 밑에 Namespaces에서 체크박스 체크해야 추가됨 !! -->
	<!-- aop는 aop, 트랜잭션은 tx, 예약은 task -->

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	
	<!-- DB 접속 정보를 저장하는 객체 -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@192.168.10.23:1521:xe" />
		<beans:property name="username" value="spring" />
		<beans:property name="password" value="spring" />
	</beans:bean>

	
	<!-- JDBCTemplate 삭제 -->
	<!-- Mybatis 설정 객체 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation" value="classpath:mybatis-config.xml" />
		<beans:property name="mapperLocations" value="classpath:/mapper/*SQL.xml" />
	</beans:bean>
	
	<!-- DB 작업을 수행하는 객체 -->
	<beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSession" />
	</beans:bean>
	
	<!-- 파일 업로드용 객체 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760" />
	</beans:bean>
	

	<!-- 트랜잭션 관리 객체 생성 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	
	<!-- @Transactional 어노테이션 사용 설정 -->
	<tx:annotation-driven/>




	
	<!-- AOP -->
	<!-- 객체 생성 -->
	<!-- <beans:bean id="logAdvice1" class="kr.or.aop.LogAdvice1" />
	<beans:bean id="logAdvice2" class="kr.or.aop.LogAdvice2" /> -->
<!-- 	<beans:bean id="bt" class="kr.or.aop.BeforeAdvice" />
	<beans:bean id="ar" class="kr.or.aop.AfterReturnAdvice"/>
	<beans:bean id="around" class="kr.or.aop.AroundAdvice"/> -->

	
<!-- 	<aop:config> -->
		<!-- pointcut 설정 -->
		<!-- 리턴 타입 상관없음 *, 패키지 경로, 클래스명, 매소드명, 매개변수 상관없음(..) -->
<!-- 		<aop:pointcut expression="execution(* kr.or.member.model.service.MemberService.selectOneMember(..))" id="firstPointcut"/> -->
		<!-- 리턴 타입 상관없음 *, 패키지 경로, 클래스명, 매소드명 Member로 끝나야함, 매개변수 상관없음(..) -->
<!-- 		<aop:pointcut expression="execution(* kr.or.member.model.service.MemberService.*Member(..))" id="memberPointcut"/> -->
		<!-- 리턴 타입 상관없음 *, 패키지 경로, 클래스명, 매소드명 이름 상관없음 *, 매개변수 상관없음(..) -->
<!-- 		<aop:pointcut expression="execution(* kr.or.member.model.service.MemberService.*(..))" id="allPointcut"/> -->
		<!-- 리턴 타입 상관없음 *, 패키지 경로, 클래스명, 매소드명 Member로 끝나야함, 매개변수 없음() -->
<!-- 		<aop:pointcut expression="execution(* kr.or.member.model.service.MemberService.*Member())" id="selectAll"/> -->
		
		
		
		<!-- pointcut 적용 -->
<!--	<aop:aspect ref="around">
			<aop:around method="aroundTest" pointcut-ref="allPointcut"/>
		</aop:aspect> -->
		
		<!-- 전체회원조회 할 때 비밀번호 대신 다른 값 출력 -->
		<!-- <aop:aspect ref="ar">
			<aop:after-returning method="arTest" pointcut-ref="selectAll" returning="returnObj" />
		</aop:aspect> -->
		
		<!-- 로그인 할때 비밀번호 변경 -->
		<!-- <aop:aspect ref="bt">
			<aop:before method="test2" pointcut-ref="firstPointcut"/>
		</aop:aspect> -->
		
		<!-- Signature 객체 메소드 -->
		<!-- <aop:aspect ref="bt">
			<aop:before method="beforeTest" pointcut-ref="allPointcut"/>
		</aop:aspect> -->
		
		
		<!-- aop 실행 예제 -->
		<!-- <aop:aspect ref="logAdvice1">
		ref한 클래스(id)의 메소드를 사용 (logAdvice1의 testlog)
		시점은 메소드 실행되기 전, pointcut의 id를 ref함
			<aop:before method="testLog" pointcut-ref="firstPointcut"/>
		</aop:aspect>
		
		<aop:aspect ref="logAdvice2">
			<aop:before method="logging" pointcut-ref="memberPointcut"/>
		</aop:aspect> -->
		
<!-- 	</aop:config> -->
	
	
	<!-- AOP annotation 설정 활성화 -->
	<aop:aspectj-autoproxy />
	

	<!-- 예약 작업 Annotation 설정 활성화 -->
	<task:annotation-driven/>
	


	
	
	<context:component-scan base-package="kr.or.iei" />
	<context:component-scan base-package="kr.or.member" />
	<context:component-scan base-package="kr.or.notice" />
	<context:component-scan base-package="kr.or.board" />
	<context:component-scan base-package="common" />
	<context:component-scan base-package="kr.or.aop" />
	
</beans:beans>
